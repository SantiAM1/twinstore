"""
Django settings for twinstore project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

# ! GTK3 WEASYPRINT

from pathlib import Path
import os
import environ
from csp.constants import NONCE


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
env = environ.Env()
#  * Inicializar environ
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

#  * Cargar la variable de entorno del archivo .env
MERCADOPAGO_ACCESS_TOKEN = env("MERCADOPAGO_ACCESS_TOKEN")
MERCADOPAGO_PERCENTAJE = 0.0642
MERCADOPAGO_COMMISSION = (MERCADOPAGO_PERCENTAJE*(1.315))+1
MP_WEBHOOK_KEY = env("MP_WEBHOOK_KEY")
DJANGO_SECRET_KEY = env("DJANGO_SECRET_KEY")
EXCEL_TOKEN = env("EXCEL_TOKEN")
SECRET_KEY = DJANGO_SECRET_KEY

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

DEBUG = env("DEBUG").lower() == "true"

# * Host
SITE_URL = "twinstore.com.ar"

# ! Actualizar el HOST con el dominio
ALLOWED_HOSTS = env("ALLOWED_HOSTS").split(",")

# ! Verificar las correspondencias
CSRF_TRUSTED_ORIGINS = [
    f"https://twinstore.com.ar", "https://www.twinstore.com.ar"
]

# * Sessions
SESSION_ENGINE = "django.contrib.sessions.backends.db"
SESSION_COOKIE_AGE = 86400
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = True        # * Solo se envían por HTTPS
CSRF_COOKIE_SECURE = True           # * Igual para CSRF
CSRF_COOKIE_HTTPONLY = True         # * Protege aún más
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_SSL_REDIRECT = False

# Application definition

INSTALLED_APPS = [
    "django_user_agents",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sitemaps',
    'django_extensions',
    'axes',
    'django_cleanup.apps.CleanupConfig',
    'rest_framework',
    'csp',
    'products',
    'core',
    'cart',
    'users',
    'payment',
    'compressor',
]

MIDDLEWARE = [
    'axes.middleware.AxesMiddleware',
    "django_user_agents.middleware.UserAgentMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'csp.middleware.CSPMiddleware',
    'core.middleware.mantenimiento.MantenimientoGlobalMiddleware',
]

AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesBackend',
    'django.contrib.auth.backends.ModelBackend',
]

DATA_UPLOAD_MAX_MEMORY_SIZE = 20 * 1024 * 1024

AXES_LOCKOUT_PARAMETERS = ['username', 'ip_address']
AXES_FAILURE_LIMIT = 5
AXES_COOLOFF_TIME = 1
AXES_RESET_ON_SUCCESS = True

CONTENT_SECURITY_POLICY = {
    "DIRECTIVES": {
        "default-src": ["'self'"],
        "style-src": [
            "'self'",
            "'unsafe-inline'",
            "https://cdn.jsdelivr.net",
            "https://fonts.googleapis.com"
        ],
        "script-src": [
            "'self'",
            "https://cdn.jsdelivr.net",
            NONCE
        ],
        "font-src": [
            "'self'",
            "https://cdn.jsdelivr.net",
            "https://fonts.gstatic.com",
            "data:"
        ],
        "img-src": ["'self'", "data:"],
        "frame-src": [
            "'self'",
            "https://www.google.com",
            "https://maps.google.com",
        ],
        "object-src": ["'none'"],
        "base-uri": ["'self'"]
    }
}

SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = "DENY"
SECURE_CONTENT_TYPE_NOSNIFF = True

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'cart.context_processors.carrito_total',
                'core.context_processors.render_menu',
                'core.context_processors.canonical_url',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

REST_FRAMEWORK = {
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
    'anon': '10/minute',
    'user': '100/minute',

    'carrito': '30/minute',
    'calcular_pedido': '10/minute',
    'solicitar_comprobante': '10/minute',
    'toggle_notificaciones': '10/hour',
    'enviar_wtap': '10/day',
    'filtros_dinamicos': '30/minute',
    'prediccion_busqueda': '60/minute',
    },
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ] if not DEBUG else [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ]
}

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env("DB_NAME"),
        'USER': env("DB_USER"),
        'PASSWORD': env("DB_PASSWORD"),
        'HOST': env("DB_HOST"),
        'PORT': env("DB_PORT"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [BASE_DIR / "static"]

COMPRESS_ENABLED = not DEBUG
COMPRESS_OFFLINE = True  # Compila los archivos al hacer collectstatic
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "compressor.finders.CompressorFinder",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery Configuration
CELERY_BROKER_URL = env("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = env("CELERY_RESULT_BACKEND")
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'

# Configurar la URL de login
LOGIN_URL = "/usuario/login/"

# * Argentina !
LANGUAGE_CODE = 'es-ar'
TIME_ZONE = 'America/Argentina/Buenos_Aires'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Amazon SES
AWS_SES_ACCESS_KEY_ID = env("AWS_SES_ACCESS_KEY_ID")
AWS_SES_SECRET_ACCESS_KEY = env("AWS_SES_SECRET_ACCESS_KEY")
AWS_SES_REGION_NAME = env("AWS_SES_REGION_NAME")
AWS_SES_SOURCE_EMAIL = env("AWS_SES_SOURCE_EMAIL")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[{asctime}] {levelname} {name} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "file_mercadopago": {
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "logs" / "mercadopago.log",
            "formatter": "verbose",
            "level": "INFO",
        },
    },
    "loggers": {
        "mercadopago": {
            "handlers": ["file_mercadopago"],
            "level": "INFO",
            "propagate": False,
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
}
